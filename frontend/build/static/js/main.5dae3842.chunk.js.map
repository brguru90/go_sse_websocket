{"version":3,"sources":["App.jsx","serviceWorker.js","index.js"],"names":["App","state","client","connect","resp","document","querySelector","innerHTML","WebSocket","onopen","console","log","onmessage","event","data","onclose","wasClean","code","reason","onerror","error","alert","message","disconnect","close","send","text","value","timeout","setTimeout","$","addClass","clearTimeout","className","onClick","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"6OAIqBA,E,4MACjBC,MAAQ,G,EAERC,OAAS,K,EAUTC,QAAU,WACN,IAAMC,EAAOC,SAASC,cAAc,OACpCF,EAAKG,UAAY,OAEjB,IAAML,EAAS,IAAIM,UAAU,+BAE7BN,EAAOO,OAAS,WACZC,QAAQC,IAAI,iCACZP,EAAKG,WAAa,mCAItBL,EAAOU,UAAY,SAAUC,GACzBH,QAAQC,IAAR,+CAAoDE,EAAMC,OAC1DV,EAAKG,WAAL,UAAqBM,EAAMC,KAA3B,OAGJZ,EAAOa,QAAU,SAAUF,GACnBA,EAAMG,UACNN,QAAQC,IAAR,kDAC+CE,EAAMI,KADrD,mBACoEJ,EAAMK,SAE1Ed,EAAKG,WAAL,kDAA6DM,EAAMI,KAAnE,mBAAkFJ,EAAMK,OAAxF,QAIAR,QAAQC,IAAI,2BACZP,EAAKG,WAAa,8BAI1BL,EAAOiB,QAAU,SAAUC,GACvBV,QAAQC,IAAIS,GACZC,MAAM,WAAD,OAAYD,EAAME,UACvBlB,EAAKG,WAAL,kBAA6Ba,EAAME,QAAnC,OAGJ,EAAKpB,OAASA,G,EAGlBqB,WAAa,WACT,EAAKrB,OAAOsB,S,EAGhBC,KAAO,WACH,IAAMC,EAAOrB,SAASC,cAAc,YAAYqB,MAChD,EAAKzB,OAAOuB,KAAKC,I,kEArDjBhB,QAAQC,IAAI,MACZ,IAAIiB,EAAUC,YAAW,WACrBC,EAAE,QAAQC,SAAS,UACnBC,aAAaJ,KACd,O,+BAqDH,OACI,yBAAKK,UAAU,OACX,6BACA,6BACA,4BAAQC,QAASC,KAAKhC,SAAtB,WACA,4BAAQ+B,QAASC,KAAKZ,YAAtB,cACA,6BACA,6BAEA,mCACA,6BACA,6BACA,4BAAQW,QAASC,KAAKV,MAAtB,QACA,mC,GA5EiBW,aCQbC,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCZZC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJvC,SAASwC,eAAe,SDuHpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAACC,GACHA,EAAaC,gBAEhBC,OAAM,SAAChC,GACJV,QAAQU,MAAMA,EAAME,a","file":"static/js/main.5dae3842.chunk.js","sourcesContent":["import React, {Component} from \"react\"\nimport \"./App.scss\"\nimport * as $ from \"jquery\"\n\nexport default class App extends Component {\n    state = {}\n\n    client = null\n\n    componentDidMount() {\n        console.log(\"hi\")\n        let timeout = setTimeout(() => {\n            $(\".App\").addClass(\"loaded\")\n            clearTimeout(timeout)\n        }, 1000)\n    }\n\n    connect = () => {\n        const resp = document.querySelector(\"pre\")\n        resp.innerHTML = \"guru\"\n\n        const client = new WebSocket(\"ws://localhost:8000/ws/chat\")\n\n        client.onopen = function () {\n            console.log(\"[open] Connection established\")\n            resp.innerHTML += \"[open] Connection established\\n\"\n            // client.send(\"My name is John\");\n        }\n\n        client.onmessage = function (event) {\n            console.log(`[message] Data received from server: ${event.data}`)\n            resp.innerHTML += `${event.data}\\n`\n        }\n\n        client.onclose = function (event) {\n            if (event.wasClean) {\n                console.log(\n                    `[close] Connection closed cleanly, code=${event.code} reason=${event.reason}`\n                )\n                resp.innerHTML += `[close] Connection closed cleanly, code=${event.code} reason=${event.reason}\\n`\n            } else {\n                // e.g. server process killed or network down\n                // event.code is usually 1006 in this case\n                console.log(\"[close] Connection died\")\n                resp.innerHTML += \"[close] Connection died\\n\"\n            }\n        }\n\n        client.onerror = function (error) {\n            console.log(error)\n            alert(`[error] ${error.message}`)\n            resp.innerHTML += `[error] ${error.message}\\n`\n        }\n\n        this.client = client\n    }\n\n    disconnect = () => {\n        this.client.close()\n    }\n\n    send = () => {\n        const text = document.querySelector(\"textarea\").value\n        this.client.send(text)\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <br />\n                <br />\n                <button onClick={this.connect}>Connect</button>\n                <button onClick={this.disconnect}>Disconnect</button>\n                <br />\n                <br />\n\n                <textarea />\n                <br />\n                <br />\n                <button onClick={this.send}>Send</button>\n                <pre />\n            </div>\n        )\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n)\n\nexport function register(config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\")\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {\"Service-Worker\": \"script\"},\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\")\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\")\n        })\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister()\n            })\n            .catch((error) => {\n                console.error(error.message)\n            })\n    }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App.jsx\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}